
rf-node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000002b2  00000346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800070  00800070  00000356  2**0
                  ALLOC
  3 .stab         00000fe4  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000efb  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	23 c1       	rjmp	.+582    	; 0x25c <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e2 eb       	ldi	r30, 0xB2	; 178
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__CCP__+0x6>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 37       	cpi	r26, 0x70	; 112
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__CCP__+0x2>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a0 e7       	ldi	r26, 0x70	; 112
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ac 39       	cpi	r26, 0x9C	; 156
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	2d c1       	rjmp	.+602    	; 0x2ae <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:
static unsigned long last_status=0;
static unsigned long last_sensor_data=0;
volatile unsigned long delay_counter;

int main(void)
{
  56:	df 93       	push	r29
  58:	cf 93       	push	r28
  5a:	cd b7       	in	r28, 0x3d	; 61
  5c:	de b7       	in	r29, 0x3e	; 62
	VW_LED_DDR |= VW_LED_MASK; // set as output
  5e:	87 e3       	ldi	r24, 0x37	; 55
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	27 e3       	ldi	r18, 0x37	; 55
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	f9 01       	movw	r30, r18
  68:	20 81       	ld	r18, Z
  6a:	21 60       	ori	r18, 0x01	; 1
  6c:	fc 01       	movw	r30, r24
  6e:	20 83       	st	Z, r18
	VW_LED_PORT &= ~VW_LED_MASK;
  70:	88 e3       	ldi	r24, 0x38	; 56
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	28 e3       	ldi	r18, 0x38	; 56
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	f9 01       	movw	r30, r18
  7a:	20 81       	ld	r18, Z
  7c:	2e 7f       	andi	r18, 0xFE	; 254
  7e:	fc 01       	movw	r30, r24
  80:	20 83       	st	Z, r18
    VW_TX_DDR |= VW_TX_MASK; // set as output - TODO - remove this line after testing
  82:	87 e3       	ldi	r24, 0x37	; 55
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	27 e3       	ldi	r18, 0x37	; 55
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	f9 01       	movw	r30, r18
  8c:	20 81       	ld	r18, Z
  8e:	24 60       	ori	r18, 0x04	; 4
  90:	fc 01       	movw	r30, r24
  92:	20 83       	st	Z, r18

	vw_setup();
  94:	c3 d0       	rcall	.+390    	; 0x21c <vw_setup>
		}
		if (millis() - last_sensor_data > SENSOR_PERIOD) {
			send_sensor_data(SN_ADDRESS_BROADCAST);
		}
#endif
	}
  96:	ff cf       	rjmp	.-2      	; 0x96 <main+0x40>

00000098 <update_millis>:
}
#endif

static uint8_t f_ms=0;
void update_millis(void)
{
  98:	df 93       	push	r29
  9a:	cf 93       	push	r28
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	VW_TX_PIN |= VW_TX_MASK;
  a0:	86 e3       	ldi	r24, 0x36	; 54
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	26 e3       	ldi	r18, 0x36	; 54
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	f9 01       	movw	r30, r18
  aa:	20 81       	ld	r18, Z
  ac:	24 60       	ori	r18, 0x04	; 4
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
	if (f_ms++ == ISR_PER_MILLI)
  b2:	90 91 7c 00 	lds	r25, 0x007C
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 31       	cpi	r25, 0x10	; 16
  ba:	09 f0       	breq	.+2      	; 0xbe <update_millis+0x26>
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	9f 5f       	subi	r25, 0xFF	; 255
  c0:	90 93 7c 00 	sts	0x007C, r25
  c4:	88 23       	and	r24, r24
  c6:	a9 f0       	breq	.+42     	; 0xf2 <update_millis+0x5a>
	{
		ms++;
  c8:	80 91 70 00 	lds	r24, 0x0070
  cc:	90 91 71 00 	lds	r25, 0x0071
  d0:	a0 91 72 00 	lds	r26, 0x0072
  d4:	b0 91 73 00 	lds	r27, 0x0073
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	a1 1d       	adc	r26, r1
  dc:	b1 1d       	adc	r27, r1
  de:	80 93 70 00 	sts	0x0070, r24
  e2:	90 93 71 00 	sts	0x0071, r25
  e6:	a0 93 72 00 	sts	0x0072, r26
  ea:	b0 93 73 00 	sts	0x0073, r27
		f_ms=0;
  ee:	10 92 7c 00 	sts	0x007C, r1

	}
}
  f2:	cf 91       	pop	r28
  f4:	df 91       	pop	r29
  f6:	08 95       	ret

000000f8 <millis>:

unsigned long millis(void)
{
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
	return ms;
 100:	80 91 70 00 	lds	r24, 0x0070
 104:	90 91 71 00 	lds	r25, 0x0071
 108:	a0 91 72 00 	lds	r26, 0x0072
 10c:	b0 91 73 00 	lds	r27, 0x0073
}
 110:	bc 01       	movw	r22, r24
 112:	cd 01       	movw	r24, r26
 114:	cf 91       	pop	r28
 116:	df 91       	pop	r29
 118:	08 95       	ret

0000011a <_crc_ccitt_update>:
    }
    \endcode */

static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	00 d0       	rcall	.+0      	; 0x124 <_crc_ccitt_update+0xa>
 124:	00 d0       	rcall	.+0      	; 0x126 <_crc_ccitt_update+0xc>
 126:	0f 92       	push	r0
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	9c 83       	std	Y+4, r25	; 0x04
 12e:	8b 83       	std	Y+3, r24	; 0x03
 130:	6d 83       	std	Y+5, r22	; 0x05
    uint16_t __ret;

    __asm__ __volatile__ (
 132:	2d 81       	ldd	r18, Y+5	; 0x05
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	9c 81       	ldd	r25, Y+4	; 0x04
 138:	8c 01       	movw	r16, r24
 13a:	02 27       	eor	r16, r18
 13c:	00 2e       	mov	r0, r16
 13e:	02 95       	swap	r16
 140:	00 7f       	andi	r16, 0xF0	; 240
 142:	00 25       	eor	r16, r0
 144:	01 2e       	mov	r0, r17
 146:	10 2f       	mov	r17, r16
 148:	02 95       	swap	r16
 14a:	0f 70       	andi	r16, 0x0F	; 15
 14c:	00 26       	eor	r0, r16
 14e:	06 95       	lsr	r16
 150:	10 27       	eor	r17, r16
 152:	01 27       	eor	r16, r17
 154:	00 0f       	add	r16, r16
 156:	00 0f       	add	r16, r16
 158:	00 0f       	add	r16, r16
 15a:	00 25       	eor	r16, r0
 15c:	1a 83       	std	Y+2, r17	; 0x02
 15e:	09 83       	std	Y+1, r16	; 0x01

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    return __ret;
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	9a 81       	ldd	r25, Y+2	; 0x02
}
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	cf 91       	pop	r28
 170:	df 91       	pop	r29
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <vw_crc>:


// Compute CRC over count bytes.
// This should only be ever called at user level, not interrupt level
uint16_t vw_crc(uint8_t *ptr, uint8_t count)
{
 178:	df 93       	push	r29
 17a:	cf 93       	push	r28
 17c:	00 d0       	rcall	.+0      	; 0x17e <vw_crc+0x6>
 17e:	00 d0       	rcall	.+0      	; 0x180 <vw_crc+0x8>
 180:	0f 92       	push	r0
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	9c 83       	std	Y+4, r25	; 0x04
 188:	8b 83       	std	Y+3, r24	; 0x03
 18a:	6d 83       	std	Y+5, r22	; 0x05
    uint16_t crc = 0xffff;
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	9f ef       	ldi	r25, 0xFF	; 255
 190:	9a 83       	std	Y+2, r25	; 0x02
 192:	89 83       	std	Y+1, r24	; 0x01

    while (count-- > 0) 
 194:	0f c0       	rjmp	.+30     	; 0x1b4 <vw_crc+0x3c>
	crc = _crc_ccitt_update(crc, *ptr++);
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	9c 81       	ldd	r25, Y+4	; 0x04
 19a:	fc 01       	movw	r30, r24
 19c:	20 81       	ld	r18, Z
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	9c 81       	ldd	r25, Y+4	; 0x04
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	9c 83       	std	Y+4, r25	; 0x04
 1a6:	8b 83       	std	Y+3, r24	; 0x03
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	9a 81       	ldd	r25, Y+2	; 0x02
 1ac:	62 2f       	mov	r22, r18
 1ae:	b5 df       	rcall	.-150    	; 0x11a <_crc_ccitt_update>
 1b0:	9a 83       	std	Y+2, r25	; 0x02
 1b2:	89 83       	std	Y+1, r24	; 0x01
// This should only be ever called at user level, not interrupt level
uint16_t vw_crc(uint8_t *ptr, uint8_t count)
{
    uint16_t crc = 0xffff;

    while (count-- > 0) 
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	9d 81       	ldd	r25, Y+5	; 0x05
 1b8:	99 23       	and	r25, r25
 1ba:	09 f4       	brne	.+2      	; 0x1be <vw_crc+0x46>
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	9d 81       	ldd	r25, Y+5	; 0x05
 1c0:	91 50       	subi	r25, 0x01	; 1
 1c2:	9d 83       	std	Y+5, r25	; 0x05
 1c4:	88 23       	and	r24, r24
 1c6:	39 f7       	brne	.-50     	; 0x196 <vw_crc+0x1e>
	crc = _crc_ccitt_update(crc, *ptr++);
    return crc;
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	9a 81       	ldd	r25, Y+2	; 0x02
}
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	cf 91       	pop	r28
 1d8:	df 91       	pop	r29
 1da:	08 95       	ret

000001dc <vw_symbol_6to4>:

// Convert a 6 bit encoded symbol into its 4 bit decoded equivalent
uint8_t vw_symbol_6to4(uint8_t symbol)
{
 1dc:	df 93       	push	r29
 1de:	cf 93       	push	r28
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <vw_symbol_6to4+0x6>
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i;
    
    // Linear search :-( Could have a 64 byte reverse lookup table?
    for (i = 0; i < 16; i++)
 1e8:	19 82       	std	Y+1, r1	; 0x01
 1ea:	0f c0       	rjmp	.+30     	; 0x20a <vw_symbol_6to4+0x2e>
	if (symbol == symbols[i]) return i;
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	88 2f       	mov	r24, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	80 5a       	subi	r24, 0xA0	; 160
 1f4:	9f 4f       	sbci	r25, 0xFF	; 255
 1f6:	fc 01       	movw	r30, r24
 1f8:	90 81       	ld	r25, Z
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	98 17       	cp	r25, r24
 1fe:	11 f4       	brne	.+4      	; 0x204 <vw_symbol_6to4+0x28>
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	07 c0       	rjmp	.+14     	; 0x212 <vw_symbol_6to4+0x36>
uint8_t vw_symbol_6to4(uint8_t symbol)
{
    uint8_t i;
    
    // Linear search :-( Could have a 64 byte reverse lookup table?
    for (i = 0; i < 16; i++)
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	8f 5f       	subi	r24, 0xFF	; 255
 208:	89 83       	std	Y+1, r24	; 0x01
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	80 31       	cpi	r24, 0x10	; 16
 20e:	70 f3       	brcs	.-36     	; 0x1ec <vw_symbol_6to4+0x10>
	if (symbol == symbols[i]) return i;
    return 0; // Not found
 210:	80 e0       	ldi	r24, 0x00	; 0
}
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	cf 91       	pop	r28
 218:	df 91       	pop	r29
 21a:	08 95       	ret

0000021c <vw_setup>:
    }
}
#endif

void vw_setup(void)
{
 21c:	df 93       	push	r29
 21e:	cf 93       	push	r28
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
#ifdef __AVR_ATtiny85__
    TCCR0A = _BV(WGM01);
 224:	8a e4       	ldi	r24, 0x4A	; 74
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	22 e0       	ldi	r18, 0x02	; 2
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18
#else
        TCCR0B = _BV(CS00);
#define VW_TIMER_PRESCALE 1UL
#endif
#elif (F_CPU == 1000000)
        TCCR0B = _BV(CS00);
 22e:	83 e5       	ldi	r24, 0x53	; 83
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	fc 01       	movw	r30, r24
 236:	20 83       	st	Z, r18
#define VW_TIMER_PRESCALE 1UL
#else
#error Invalid F_CPU. Only 1MHz and 8Mhz supported
#endif
#define _O_VAL_  ((F_CPU/VW_TIMER_PRESCALE) / VW_RX_SAMPLES_PER_BIT) / VW_SPEED
    OCR0A = 63; //_O_VAL_;
 238:	89 e4       	ldi	r24, 0x49	; 73
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	2f e3       	ldi	r18, 0x3F	; 63
 23e:	fc 01       	movw	r30, r24
 240:	20 83       	st	Z, r18
    TIMSK |= _BV(OCIE0A);
 242:	89 e5       	ldi	r24, 0x59	; 89
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	29 e5       	ldi	r18, 0x59	; 89
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	f9 01       	movw	r30, r18
 24c:	20 81       	ld	r18, Z
 24e:	20 61       	ori	r18, 0x10	; 16
 250:	fc 01       	movw	r30, r24
 252:	20 83       	st	Z, r18
#endif
#ifdef VW_TX_CAPABLE
    VW_TX_DDR |= VW_TX_MASK; // set as output
#endif
    // global interrupt enable
    sei();
 254:	78 94       	sei
}
 256:	cf 91       	pop	r28
 258:	df 91       	pop	r29
 25a:	08 95       	ret

0000025c <__vector_10>:

// This is the interrupt service routine called when timer1 overflows
// Its job is to output the next bit from the transmitter (every 8 calls)
// and to call the PLL code if the receiver is enabled
ISR(TIM0_COMPA_vect)
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	2f 93       	push	r18
 268:	3f 93       	push	r19
 26a:	4f 93       	push	r20
 26c:	5f 93       	push	r21
 26e:	6f 93       	push	r22
 270:	7f 93       	push	r23
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	af 93       	push	r26
 278:	bf 93       	push	r27
 27a:	ef 93       	push	r30
 27c:	ff 93       	push	r31
 27e:	df 93       	push	r29
 280:	cf 93       	push	r28
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
#endif
#ifdef VW_RX_CAPABLE
    if (vw_rx_enabled && !vw_tx_enabled) vw_pll();
#endif
#ifdef HAVE_MILLIS
    update_millis();
 286:	08 df       	rcall	.-496    	; 0x98 <update_millis>
#endif

}
 288:	cf 91       	pop	r28
 28a:	df 91       	pop	r29
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	bf 91       	pop	r27
 292:	af 91       	pop	r26
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	7f 91       	pop	r23
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
